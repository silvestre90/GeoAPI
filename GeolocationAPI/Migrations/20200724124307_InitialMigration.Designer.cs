// <auto-generated />
using System;
using GeolocationAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeolocationAPI.Migrations
{
    [DbContext(typeof(GeolocationContext))]
    [Migration("20200724124307_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GeolocationAPI.Models.Geolocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Continent_code");

                    b.Property<string>("Continent_name");

                    b.Property<string>("Country_code");

                    b.Property<string>("Country_name");

                    b.Property<string>("IP");

                    b.Property<double>("Latitude");

                    b.Property<int?>("LocationId");

                    b.Property<double>("Longitude");

                    b.Property<string>("Region_code");

                    b.Property<string>("Region_name");

                    b.Property<string>("Type");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Geolocation");
                });

            modelBuilder.Entity("GeolocationAPI.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int?>("LocationId");

                    b.Property<string>("Name");

                    b.Property<string>("Native");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("GeolocationAPI.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Calling_code");

                    b.Property<string>("Capital");

                    b.Property<string>("Country_flag");

                    b.Property<string>("Country_flag_emoji");

                    b.Property<string>("Country_flag_emoji_unicode");

                    b.Property<int>("Geoname_id");

                    b.Property<bool>("Is_eu");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("GeolocationAPI.Models.Geolocation", b =>
                {
                    b.HasOne("GeolocationAPI.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("GeolocationAPI.Models.Language", b =>
                {
                    b.HasOne("GeolocationAPI.Models.Location")
                        .WithMany("Languages")
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
